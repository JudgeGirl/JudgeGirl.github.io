{"name":"Judgegirl.GitHub.io","tagline":"Tutorial: How to install JudgeGirl Online Judge","body":"Judge Girl 批改娘簡易安裝手冊\r\n==================\r\n\r\n## 準備工作 ##\r\n\r\n一台 Linux 作業系統，最好是 Ubuntu。(CentOS 和 Debian 可能會沒有建立沙盒所需要的新版套件)\r\n\r\n## 起步 ##\r\n\r\n假定現在給一台 Ubuntu 14.04 的主機，先增加兩個使用者帳號。\r\n\r\n```\r\n# adduser judgesister\r\n# adduser butler\r\n```\r\n\r\n`judgesister` 作為前端網頁和發送測試工作，`butler` 作為運行測試工作。從關係上來看，`butler` 允許在不同主機上運行。\r\n\r\n## 安裝套件 ##\r\n\r\n```\r\n# apt-get install cgroup-tools\r\n# apt-get install build-essential nodejs npm\r\n# apt-get install mysql-server\r\n```\r\n\r\n* `cgroup-tools` 為 Ubuntu 上 cgroup 的相關套件，沙盒需要 `/sys/fs/cgroup/memory/`。\r\n* `build-essential nodejs npm` 評測系統後台需使用 gcc 編譯器、前端使用 nodejs 和 npm 套件管理。\r\n* `mysql-server` 資料庫系統使用 MySQL。\r\n\r\n## 安裝模組 ##\r\n\r\n```\r\n$ cd /home/judgesister/\r\n$ git clone https://github.com/JudgeGirl/JudgeNode\r\n$ git clone https://github.com/JudgeGirl/Judge-receiver\r\n$ git clone https://github.com/JudgeGirl/Judge-sender\r\n$ git clone https://github.com/JudgeGirl/Judge-MySQL\r\n$ git clone https://github.com/JudgeGirl/Judge-template\r\n```\r\n\r\n系統大致上分成四個部份 \r\n\r\n* JudgeNode (前端網頁)\r\n* Judge-sender (發送測試工作)\r\n* Judge-receiver (運行測試工作)\r\n* Judge-MySQL (網站資料庫系統)\r\n\r\n### Judge-MySQL ###\r\n\r\n記得一開始安裝 `mysql-server` 的 root 密碼，皆下來創立專屬於 Judge Girl 專用的 database。建立一個 `deploy_mySQL.sh`，檔案內容如下：\r\n\r\n```\r\n$ cat deploy_mySQL.sh\r\n#!/bin/bash\r\n\r\nEXPECTED_ARGS=3\r\nE_BADARGS=65\r\nMYSQL=`which mysql`\r\n\r\nQ1=\"CREATE DATABASE IF NOT EXISTS $1;\"\r\nQ2=\"GRANT USAGE ON *.* TO $2@localhost IDENTIFIED BY '$3';\"\r\nQ3=\"GRANT ALL PRIVILEGES ON $1.* TO $2@localhost;\"\r\nQ4=\"FLUSH PRIVILEGES;\"\r\nSQL=\"${Q1}${Q2}${Q3}${Q4}\"\r\n\r\nif [ $# -ne $EXPECTED_ARGS ]\r\nthen\r\n  echo \"Usage: $0 dbname dbuser dbpass\"\r\n  exit $E_BADARGS\r\nfi\r\n\r\n$MYSQL -uroot -p -e \"$SQL\"\r\n```\r\n\r\n接著，將其變成執行檔後，輸入資料庫名稱、使用者帳號和密碼。\r\n\r\n```\r\n$ chmod +x deploy_mySQL.sh\r\n$ ./deploy_mysql.sh <database> <user> <password>\r\n```\r\n\r\n接著進入 MySQL，貼上 `./Judge-MySQL/CREATE_TABLE.sql` 的內容，\r\n\r\n```\r\n$ mysql -u root -p\r\nmysql >> use judgegirl\r\nmysql >> <copy Judge-MySQL/CREATE_TABLE.sql>\r\n```\r\n\r\n建立約 11 個 Table，可以利用下述指令確定是否完成。\r\n\r\n```\r\nmysql >> use judgegirl\r\nmysql >> show tables\r\n```\r\n### Judge-sender ###\r\n\r\n定時偵測資料庫中還沒有測試的原始碼，抓取後將測資和原始碼一同丟到遠端機器上進行測試，遠端機器也可以是自身，遠端機器需按照 Judge-receiver 的步驟構造。\r\n\r\n由於 MySQL 不支援 python 3，但支持 python 2，安裝額外套件使得 MySQL 得以在 python 3 上運行。首先，安裝 `python3-dev`，等下 python3 安裝過程中會需要相關的套件。\r\n\r\n```\r\n# apt-get install python3-dev\r\n```\r\n\r\n接著，按照網路提供的[方案](http://stackoverflow.com/questions/12031151/how-to-install-mysqldb-with-python-3-2) 解決。安裝時特別小心 python3 的 working directory，務必到該目錄下進行安裝。\r\n\r\n```\r\n$ cd install_tutorial\r\n$ python distribute_setup.py\r\n$ curl -L https://github.com/PyMySQL/PyMySQL/tarball/pymysql-0.6 | tar xz\r\n$ cd PyMySQL-PyMySQL-7c86923/\r\n$ python3 setup.py install\r\n```\r\n\r\n* 如果出現 `setuptools not found` [issue](https://github.com/JudgeGirl/Judge-sender/issues/5)\r\n```\r\nwget https://bootstrap.pypa.io/ez_setup.py -O - | python3\r\n```\r\n* 如果出現 `mysql_config not found` [issue](https://github.com/JudgeGirl/Judge-sender/issues/4)   \r\n```\r\napt-get install libmysqlclient-dev\r\n```\r\n\r\n由於是遠端遙控，目前採用 ssh 遠端登入，要使用不需要密碼的方式登入遠端，假設從 `root@a.a.a.a` 登入到遠端的 `butler@b.b.b.b` 上 (意即用 root 身分執行 `./Judge-sender/start` 運行)，如果在同一台主機，直接 `root$ cp ~/.ssh/id_rsa.pub /home/butler/.ssh/authorized_keys` 即可。\r\n\r\n```\r\nroot@a.a.a.a# ssh-keygen -t rsa\r\nroot@a.a.a.a# scp ~/.ssh/id_rsa.pub butler@b.b.b.b:~/.ssh/\r\nroot@a.a.a.a# ssh butler@b.b.b.b\r\nbutler@b.b.b.b$ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\r\n```\r\n\r\n### Judge-receiver ###\r\n\r\n若使用同一台電腦，將剛剛安裝的 Judge-receiver 下的檔案編譯後，丟到 butler 的家目錄，並且確定檔案權限。\r\n\r\n```\r\n$ make -C /home/judgesister/Judge-receiver/slave/ clean\r\n$ make -C /home/judgesister/Judge-receiver/slave/\r\n$ cp -r /home/judgesister/Judge-receiver/slave/* /home/butler\r\n# chown butler:butler /home/butler/butler\r\n# chown butler:butler /home/butler/tiger\r\n# chmod +s /home/butler/sandbox\r\n```\r\n\r\n例如要遠端連到 `butler@a.a.a.a`，在 butler 的家目錄配置如下，權限部份請特別小心 sandbox 的執行檔，必須 `chmod +s sandbox`。\r\n\r\n```\r\nroot@supermicro:/home/butler# ls -l\r\ntotal 832\r\n-rwxr-xr-x 1 butler butler    770 Jan 23 16:06 butler\r\n-rw-r--r-- 1 root   root      305 Jan 23 16:06 config.h\r\n-rw-r--r-- 1 root   root      274 Jan 23 16:06 GNUmakefile\r\n-rw-rw-r-- 1 root   root        5 Feb 18 00:00 log\r\n-rwsr-sr-x 1 root   root    18457 Jan 23 16:06 sandbox\r\n-rw-r--r-- 1 root   root     3281 Jan 23 16:06 sandbox.c\r\ndrwxr-xr-x 2 root   root     4096 Sep 12 19:06 script\r\n-rw-r--r-- 1 root   root      106 Jan 23 16:06 test.c\r\n-rwxr-xr-x 1 butler butler 795864 Jan 23 16:06 tiger\r\n-rw-r--r-- 1 root   root      449 Jan 23 16:06 tiger.c\r\n```\r\n\r\n```\r\nroot@supermicro:/home/butler# tree\r\n.\r\n├── butler\r\n├── config.h\r\n├── GNUmakefile\r\n├── log\r\n├── sandbox\r\n├── sandbox.c\r\n├── script\r\n│   ├── fstab\r\n│   ├── mount\r\n│   └── umount\r\n├── test.c\r\n├── tiger\r\n└── tiger.c\r\n```\r\n\r\n編輯一下 `.bashrc` 的環境，等下遠端過來操作沙盒時，需要直接當作指令執行 butler 家目錄下編譯好的執行檔\r\n\r\n```\r\nroot@supermicro:/home/butler# vim .bashrc\r\n```\r\n\r\n在 `.bashrc` 加入\r\n\r\n```\r\nexport PATH=$HOME:$PATH\r\n```\r\n\r\n更新一下剛剛的設定\r\n\r\n```\r\nroot@supermicro:/home/butler# source .bashrc\r\n```\r\n\r\n測試是否有成功，確定 `echo $PATH` 中出現 `/home/butler`。\r\n\r\n```\r\nroot@supermicro:/home/butler# su butler\r\nbutler@supermicro:~$ echo $PATH\r\n/home/butler:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\r\n```\r\n\r\n\r\n#### 準備沙盒 ####\r\n\r\n* 確定 server 上有 `cgroup` 功能，在某些舊 kernel 並沒有我們需要限制沙盒的功能 (目前確定部分版本的 CentOS 和 Debian 沒有支持)。確定 `memory.limit_in_bytes` 存在在清單中。(可以使用 `$ mount` 找到 `cgroup` 在哪個資料夾。)\r\n```\r\n$ ls /sys/fs/cgroup/memory/\r\n```\r\n\r\n* 在根目錄建造沙盒 `/sandbox`\r\n```\r\nroot@supermicro:/# ls -l\r\ntotal 104\r\ndrwxr-xr-x  13 root root  4096 Feb 25  2015 sandbox\r\n```\r\n\r\n* 建立 sandbox 資料夾目錄，到 `Judge-receiver/scripts` 目錄下進行構造 (否則 python 安裝時的 working directory 會造成錯誤)，\r\n```\r\nroot $ cd Judge-receiver/scripts\r\nroot $ ./prepare\r\nroot $ ./mount\r\n```\r\n\r\n 在最後一行的指令 `./mount`，每一次主機重新開啟 (例如斷電重開職主機後)，要重新執行這條指令，否則測試結果會是一整排 Runtimer Error。將跟目錄下的這些資料夾 mount 到 sandbox 下。結果大致如下：  \r\n```\r\nroot@supermicro:/sandbox# tree -L 2\r\nsandbox/\r\n├── bin\r\n├── dev\r\n├── etc\r\n├── lib\r\n├── lib64\r\n├── opt\r\n├── proc\r\n├── sandbox/\r\n|   ├── app\r\n|   └── ws\r\n├── sys\r\n├── tmp\r\n└── usr\r\n```\r\n\r\n* 確認 `sandbox/sandbox/app`、`sandbox/sandbox/ws` 的權限配置如下，uid 與 gid 皆為 butler。如果權限不對，執行 `$ chown butler:butler app ws` 解決此問題。  \r\n```\r\nroot@supermicro:/sandbox/sandbox# ls -l\r\ntotal 8\r\ndrwxr-xr-x 2 butler butler 4096 Feb 18 00:00 app\r\ndrwxrwxrwx 2 butler butler 4096 Feb 13 23:41 ws\r\n```\r\n\r\n##### 沙盒測試 #####\r\n\r\n編譯簡單的 `hello.c`，複製到 `/sandbox` 下，並且限制時間 (second 為單位)、記憶體用量 (byte 為單位)，最後是執行的方式。如果上述測試沒有發生錯誤，順利印出 `Hello, World !` 表示沙盒部屬完成。否則可能是 mount 失敗、或者沒有順利建好資料夾。\r\n\r\n```\r\nroot@ubuntu:/home/butler# gcc hello.c\r\nroot@ubuntu:/home/butler# cp a.out /sandbox/sandbox/app/\r\nroot@ubuntu:/home/butler# ./sandbox 1 16777216 ../app/a.out\r\n```\r\n\r\n### JudgeNode ###\r\n\r\n#### 安裝 ####\r\n\r\n下載需要的套件\r\n\r\n```\r\n$ apt-get install nodejs mysql-server\r\n$ git clone https://github.com/JudgeGirl/JudgeNode\r\n$ cd JudgeNode\r\n$ npm install\r\n$ bower install\r\n$ gulp build\r\n```\r\n\r\n複製預設的設定檔案，並將資料庫帳號密碼打在 `_config.yml` 中，最後產生 https 需要的相關文件  \r\n\r\n```\r\n$ cp _DEFAULTconfig.yml _config.yml\r\n$ openssl genrsa -out privatekey.pem 1024\r\n$ openssl req -new -key privatekey.pem -out certrequest.csr\r\n$ openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem\r\n```\r\n\r\n確定 Judge 的目錄如下所示： \r\n\r\n```\r\nroot@ubuntu:/home/judgesister# tree -L 1\r\n.\r\n├── JudgeNode (可以放置別處)\r\n├── Judge-sender (一定要與 source, submission, testdata 位置相當)\r\n├── Judge-template (提供範例，可不用下載)\r\n├── source\r\n├── submission\r\n└── testdata\r\n```\r\n\r\n如果不手動建立，可以參考以下的做法建立\r\n\r\n```\r\n$ mkdir /home/judgesister/source\r\n$ mkdir /home/judgesister/submission\r\n$ mkdir /home/judgesister/testdata\r\n$ cp -r /home/judgesister/Judge-template/default/source/* /home/judgesister/source/\r\n```\r\n\r\n最後，測試用的啟動模式 `npm start` / 公開用的啟動模式 `./start`。\r\n\r\n\r\n#### 公開用的啟動模式 ####\r\n\r\n網站可能會因為某些 Bug 而掛掉，若需要不斷地重新開啟，執行目錄下的 `./start` 可以每隔 10 秒嘗試重新啟動，如果要強制關閉，請按 `CTRL + C` 終止網站啟動。在這種模式下，Debug 工作會變得非常困難。\r\n\r\n```\r\n$ ./start\r\n```\r\n\r\n如果 `CTRL + C` 沒有反應，按照下面步驟停止前端服務。\r\n\r\n```\r\n$ root@ubuntu:/home/judgesister/JudgeNode# ps aux | grep start\r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot      5671  0.0  0.0   4448   780 pts/3    S+   Feb20   0:00 /bin/sh ./start <<<<Judge-sender\r\nroot     19296  0.0  0.0  27236  8028 pts/4    S+   12:04   0:00 python3 ./start <<<<JudgeNode\r\n$ kill -9 <JudgeNode-PID>\r\n```\r\n\r\n## 加入第一道題目 ##\r\n\r\n### 網站管理員 ###\r\n\r\n在建立第一道題目之前，新增題目描述設定需要網站管理員，借由 `JudgeNode/test/workspace/adduser.js` 增加使用者帳號。假設要建立管理員身分，直接執行 `<class> = 0`。\r\n\r\n```\r\n$ cd JudgeNode/test/workspace/adduser.js\r\n$ node adduser.js nodejs judgegirl notpassword 0 judgegirl@judgegirl.org\r\n```\r\n\r\n創立好後，從前端登入後在選單中看到管理頁面，點選新增題目即可。\r\n\r\n### 分類增加 ###\r\n\r\n目前還沒支持前端分類管理，必須手動從 MySQL 下指令完成。假設要創立在 level 1，並且將題目放置在 domain 0，與法如下：\r\n\r\n```\r\n$ mysql -u root -p\r\nmysql >> use judgegirl\r\nmysql >> INSERT INTO levels (level, ttl, lorder) VALUES (1, 'Test', 1);\r\nmysql >> INSERT INTO level_domain (did, level) VALUES (0, 1);\r\n```\r\n\r\n接著，就可以進行上傳測試！","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}